import org.gradle.plugins.ide.eclipse.model.SourceFolder 

buildscript {
	repositories {
		mavenCentral()
		//mavenLocal()
		jcenter()

		maven {
			url 'http://maven.novaapi.net/'
		}
	}
	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.0'
		classpath 'us.phildop:gradle-sublimetext-plugin:0.5.3'
	}
}

apply from: 'gradle/modules/utils.gradle'

apply plugin: 'java'
//transform plugin: 'checkstyle'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

apply plugin: 'sublimeText'
apply plugin: 'eclipse'
apply plugin: 'idea'

ext.config = parseConfig("build.properties")

version = config.nova.version
group = "nova.core"

/*checkstyle {
    configFile = file('checkstyle.xml')
    configProperties = [
        "name": project.name,
        "organization": project.organization,
        "year": project.inceptionYear,
        "suppressions": file('checkstyle-suppressions.xml')
    ]
}*/

compileJava {
	sourceCompatibility = '1.8'
	options.encoding = 'UTF-8'
	options.fork = true
	options.compilerArgs << '-Xlint'
}

repositories {
	mavenCentral()
	maven {
		url 'http://maven.novaapi.net/'
	}
}

dependencies {
	compile 'com.google.guava:guava:18.0'
	compile 'org.msgpack:msgpack-core:0.7.0-p4'
	compile 'com.typesafe:config:1.2.1'
	compile 'se.jbee:silk-di:0.6'
	compile 'org.slf4j:slf4j-api:1.7.10'

	testCompile "junit:junit:4.12"
	testCompile 'org.assertj:assertj-core:1.+'
	testCompile "org.mockito:mockito-core:1.+"
	testRuntime 'org.slf4j:slf4j-simple:1.7.10'

	//checkstyle 'com.puppycrawl.tools:checkstyle:6.2'
}

task sourceJar(type: Jar) {
	from sourceSets.main.java
	from sourceSets.main.resources
	classifier = "sources"
}

task apiJar(type: Jar) {
	from sourceSets.main.output
	from sourceSets.main.java
	classifier = 'api'
	include 'nova/core/**'
}

javadoc {
	include 'nova/**'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	from 'build/docs/javadoc'
	classifier 'javadoc'
}

shadowJar {
	manifest {
		attributes("Implementation-Title": "NovaCore", "Implementation-Version": version)
	}
}

task wrapperTestJar(type: Jar) {
	from(sourceSets.test.java) {
		include "nova/wrappertests/**"
		include "nova/testutils/**"
	}
	classifier = "wrappertests"
}

artifacts {
	archives apiJar
	archives jar
	archives javadocJar
	archives shadowJar
	archives sourceJar
	archives wrapperTestJar
}

publishing {
	publications {
		main(MavenPublication) {
			from components.java
			
			artifact apiJar
			artifact javadocJar
			artifact shadowJar
			artifact sourceJar
			artifact wrapperTestJar

			pom.withXml(writePom())
		}
	}
	repositories {
		if (System.getenv("MAVEN_DIR") != null) {
			maven {
				url System.getenv("MAVEN_DIR")
			}
		}
	}
}

sublimeText {
	defaultFileExcludePatterns = ['.project', '.classpath', '.pydevproject']
	defaultFolderExcludePatterns = ['.gradle', 'bin', 'build', '.settings']
	generateSublimeJavaClasspath = true
	generateSublimeJavaSrcpath = true
	addGradleCompile = true
}

test {
	forkEvery = 1
	maxParallelForks = 4

	exclude "nova/wrappertests/**"

	testLogging {
		exceptionFormat = 'full'
	}

	testLogging.showStandardStreams = true

	beforeTest { descriptor ->
		def classPadded = String.format("%-50s", descriptor.className)
		logger.lifecycle("Running test ${classPadded} ${descriptor.name}()")
	}
}

eclipse.classpath.file {
	whenMerged {  cp -> 
		cp.entries.removeAll { it instanceof SourceFolder && it.path.startsWith("src/test/") }
	}
}
